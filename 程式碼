/******************************
 * Code.gs - 後端 (GAS) 完整程式（更新後）
 ******************************/

// ============================
// 全域變數與共用設定
// ============================
const GOOGLE_SHEET_ID = "1-YBi_AjuUKy_6agl7epY3q1rIhqnj9cwtMAuPJyArjU"; // 請換成你自己的 Sheet ID

// 定義公司位置（可自訂多個）
const OFFICE_POINTS = [
   { name: "ME", lat: 25.006464, lng: 121.494087 },
   { name: "OS", lat: 25.042974, lng: 121.548141 },
];

// 通知信收件者
const notificationRecipients = [
  "randy.classroom.tw@gmail.com",
  "mike17390122@gmail.com",
  // 可新增其他收件者
];

// 星期對照表
const DAY_NAMES = ["週日", "週一", "週二", "週三", "週四", "週五", "週六"];

/**
 * 統一取得 Spreadsheet 物件
 */
function getSpreadsheet() {
  return SpreadsheetApp.openById(GOOGLE_SHEET_ID);
}

/**
 * 將日期物件轉成 "yyyy-MM-dd-週X HH:mm:ss" 格式
 */
function formatDateWithDay(dateObj) {
  const yyyy = dateObj.getFullYear();
  const mm = String(dateObj.getMonth() + 1).padStart(2, '0');
  const dd = String(dateObj.getDate()).padStart(2, '0');
  const day = DAY_NAMES[dateObj.getDay()];
  const hh = String(dateObj.getHours()).padStart(2, '0');
  const min = String(dateObj.getMinutes()).padStart(2, '0');
  const ss = String(dateObj.getSeconds()).padStart(2, '0');
  return `${yyyy}-${mm}-${dd}-${day} ${hh}:${min}:${ss}`;
}

/**
 * （可選）返回前端頁面
 */
function doGet(e) {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .setTitle("OS-登記工時系統");
}

/**
 * doPost：改用 e.parameter 解析表單資料（避免 CORS 預檢）
 */
function doPost(e) {
  try {
    // 從 e.parameter 取得傳送的欄位
    const func = e.parameter.function;
    const paramsStr = e.parameter.parameters; // JSON 字串
    let params = [];
    if (paramsStr) {
      params = JSON.parse(paramsStr);
    }
    let resultObj;
    switch (func) {
      case "gpsCheckin":
        resultObj = JSON.parse(gpsCheckin.apply(null, params));
        break;
      case "queryTodayRecords":
        resultObj = JSON.parse(queryTodayRecords.apply(null, params));
        break;
      case "testLocationWithAuth":
        resultObj = JSON.parse(testLocationWithAuth.apply(null, params));
        break;
      case "checkDeviceBinding":
        resultObj = JSON.parse(checkDeviceBinding.apply(null, params));
        break;
      case "bulkOfflineCheckin":
        resultObj = JSON.parse(bulkOfflineCheckin.apply(null, params));
        break;
      default:
        resultObj = { 
          status: "error", 
          error: "UNKNOWN_FUNCTION", 
          code: "FUNC-404",
          message: "未知的函式！" 
        };
    }
    return ContentService
      .createTextOutput(JSON.stringify(resultObj))
      .setMimeType(ContentService.MimeType.JSON);
  } catch(err) {
    return ContentService
      .createTextOutput(JSON.stringify({
        status: "error",
        error: "DOPOST_ERROR",
        code: "SYS-999",
        message: "系統錯誤：" + err.toString()
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * 寫入操作日誌到 "Log" 工作表
 */
function writeLog(logObj) {
  const ss = getSpreadsheet();
  let logSheet = ss.getSheetByName("Log");
  if (!logSheet) {
    logSheet = ss.insertSheet("Log");
    logSheet.appendRow(["時間", "狀態", "使用者/後四碼", "動作", "距離", "訊息", "經度", "緯度"]);
  }
  const now = new Date();
  const timestamp = Utilities.formatDate(now, "GMT+8", "yyyy-MM-dd HH:mm:ss");
  const status = logObj.status || "";
  const user = logObj.user || "";
  const action = logObj.action || "";
  const distance = (logObj.distance != null) ? logObj.distance : "";
  const msg = logObj.msg || "";
  const lng = logObj.lng || "";
  const lat = logObj.lat || "";
  logSheet.appendRow([timestamp, status, user, action, distance, msg, lng, lat]);
}

/**
 * 取得設定參數：驗證頻率 (FREQUENCY) 與 允許誤差 (RADIUS)
 */
function getSettings() {
  const props = PropertiesService.getScriptProperties();
  return {
    frequency: Number(props.getProperty("FREQUENCY")) || 60,
    radius: Number(props.getProperty("RADIUS")) || 100
  };
}

/**
 * 取得監控 (Monitor) 工作表 (中文欄位)
 */
function getMonitorSheet() {
  const ss = getSpreadsheet();
  let monitorSheet = ss.getSheetByName("Monitor");
  if (!monitorSheet) {
    monitorSheet = ss.insertSheet("Monitor");
    monitorSheet.appendRow([
      "時間戳",
      "動作",
      "開始時間",
      "結束時間",
      "耗時(毫秒)",
      "狀態",
      "錯誤代碼",
      "錯誤訊息"
    ]);
  }
  return monitorSheet;
}

/**
 * 寫監控紀錄 (狀態、動作、錯誤訊息皆中文)
 */
function writeMonitorLog(sheet, actionName, startTime, endTime, status, errorCode, errorMsg) {
  const duration = endTime - startTime; // 毫秒
  const actionMap = {
    "queryTodayRecords": "查詢記錄",
    "testLocationWithAuth": "測試定位",
    "checkDeviceBinding": "檢查裝置綁定",
    "gpsCheckin": "GPS打卡",
    "bulkOfflineCheckin": "離線批次上傳"
  };
  const zhActionName = actionMap[actionName] || actionName;
  let zhStatus = status;
  if (status === "success") {
    zhStatus = "成功";
  } else if (status === "error") {
    zhStatus = "錯誤";
  }
  let zhErrorMsg = errorMsg || "";
  if (zhErrorMsg.includes("Exception:")) {
    zhErrorMsg = zhErrorMsg.replace("Exception:", "系統異常：");
  }
  sheet.appendRow([
    new Date(),
    zhActionName,
    startTime,
    endTime,
    duration,
    zhStatus,
    errorCode || "",
    zhErrorMsg
  ]);
}

/**
 * 寄送通知Email (共用)
 */
function sendNotificationEmails(subject, message, recipients) {
  if (!recipients || recipients.length === 0) return;
  recipients.forEach(email => {
    if (email) {
      MailApp.sendEmail({
        to: email,
        subject: subject,
        htmlBody: message
      });
    }
  });
}

/**
 * 檢查是否已綁定裝置
 */
function checkDeviceBinding(lastFour) {
  const startTime = new Date();
  const monitorSheet = getMonitorSheet();
  let status = "success", errorCode = null, errorMsg = null;
  try {
    const ss = getSpreadsheet();
    const authSheet = ss.getSheetByName("AuthList");
    if (!authSheet) {
      errorCode = "AUTH-001";
      return JSON.stringify({
        status: "error",
        error: "NO_AUTH_SHEET",
        code: errorCode,
        message: "授權名單工作表不存在"
      });
    }
    const authData = authSheet.getDataRange().getValues();
    for (let i = 1; i < authData.length; i++) {
      if (authData[i][0].toString() === lastFour) {
        if (authData[i][2]) {
          return JSON.stringify({ status: "success", message: "已綁定" });
        } else {
          errorCode = "AUTH-002";
          return JSON.stringify({
            status: "error",
            error: "NOT_BOUND",
            code: errorCode,
            message: "尚未綁定裝置"
          });
        }
      }
    }
    errorCode = "AUTH-003";
    return JSON.stringify({
      status: "error",
      error: "NOT_IN_AUTHLIST",
      code: errorCode,
      message: "後四碼不在授權名單中"
    });
  } catch (err) {
    status = "error";
    errorCode = "SYS-CHK-500";
    errorMsg = err.toString();
    return JSON.stringify({
      status: "error",
      error: "SYSTEM_ERROR",
      code: errorCode,
      message: "系統錯誤，請稍後再試",
      detail: errorMsg
    });
  } finally {
    const endTime = new Date();
    writeMonitorLog(monitorSheet, "checkDeviceBinding", startTime, endTime, status, errorCode, errorMsg);
  }
}

/**
 * 使用 Haversine 公式計算兩點距離（公尺）
 */
function getDistanceInMeters(lat1, lng1, lat2, lng2) {
  const R = 6371e3; // 地球半徑，單位：公尺
  const toRad = deg => deg * Math.PI / 180;
  const dLat = toRad(lat2 - lat1);
  const dLng = toRad(lng2 - lng1); // 修正：正確計算經度差
  const a = Math.sin(dLat / 2) ** 2 +
            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
            Math.sin(dLng / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}


/**
 * 取得授權對照：後四碼 -> 使用者姓名
 */
function getAuthMap() {
  const ss = getSpreadsheet();
  const authSheet = ss.getSheetByName("AuthList");
  const authMap = {};
  if (authSheet) {
    const authData = authSheet.getDataRange().getValues();
    for (let i = 1; i < authData.length; i++) {
      const code = authData[i][0];
      const name = authData[i][1];
      if (code) {
        authMap[code.toString()] = name;
      }
    }
  }
  return authMap;
}

/**
 * 解析瀏覽器名稱
 * 若不符合指定瀏覽器則回傳 null
 */
function parseBrowser(userAgent) {
  const ua = userAgent.toLowerCase();
  if (ua.indexOf("edg/") > -1) {
    return "Microsoft Edge";
  } else if (ua.indexOf("chrome/") > -1) {
    return "Chrome";
  } else if (ua.indexOf("safari/") > -1 && ua.indexOf("chrome/") === -1) {
    return "Safari";
  } else if (ua.indexOf("firefox/") > -1) {
    return "Firefox";
  }
  return null;
}

/**
 * 產生 SHIFT_ID (當下時間與後四碼組合)
 */
function generateShiftId(lastFour) {
  const now = new Date();
  const idPart = Utilities.formatDate(now, "GMT+8", "yyyyMMddHHmmss");
  return idPart + "_" + lastFour;
}

/**
 * 正常打卡流程（含 GPS 驗證、裝置綁定、通知與監控）
 * 加入檢查上一次下班是否滿 11 小時的邏輯：
 * 若不足 11 小時，將阻擋打卡並回傳「下班後未間隔 11 小時」
 */
function gpsCheckin(lastFour, deviceInfo, action, lat, lng, force, bindDevice, uuid) {
  const startTime = new Date();
  const monitorSheet = getMonitorSheet();
  let status = "success", errorCode = null, errorMsg = null;
  const lock = LockService.getScriptLock();
  let lockAcquired = false;
  
  try {
    lock.waitLock(30000);
    lockAcquired = true;
    
    const { radius } = getSettings();
    const ss = getSpreadsheet();
    const authMap = getAuthMap();
    const userName = authMap[lastFour];
    if (!userName) {
      status = "error";
      errorCode = "AUTH-004";
      return JSON.stringify({
        status: "error",
        error: "NOT_IN_AUTHLIST",
        code: errorCode,
        message: "後四碼不在授權名單中"
      });
    }
    
    let minDistance = Infinity;
    OFFICE_POINTS.forEach(office => {
      const dist = getDistanceInMeters(lat, lng, office.lat, office.lng);
      if (dist < minDistance) minDistance = dist;
    });
    const distanceRounded = Math.round(minDistance);
    if (distanceRounded > radius && !force) {
      status = "error";
      errorCode = "GPS-001";
      return JSON.stringify({
        status: "error",
        error: "GPS_RANGE_ERROR",
        code: errorCode,
        message: `離指定範圍超過 ${radius} 公尺（目前約 ${distanceRounded} 公尺），打卡失敗`
      });
    }
    
    let dbSheet = ss.getSheetByName("DB");
    if (!dbSheet) {
      dbSheet = ss.insertSheet("DB");
      dbSheet.appendRow([
        "SHIFT_ID", "後四碼", "使用者", "上班時間", "下班時間", "上班距離",
        "上班設備", "上班瀏覽器", "UUID",
        "下班距離", "下班設備", "下班瀏覽器", "UUID"
      ]);
    }
    
    const now = new Date();
    const formattedNow = Utilities.formatDate(now, "GMT+8", "yyyy-MM-dd HH:mm:ss");
    const nowDay = Utilities.formatDate(now, "GMT+8", "yyyy/MM/dd");
    const data = dbSheet.getDataRange().getValues();
    let targetRow = null;
    
    // 找出最近尚未下班的紀錄（若有則表示該班別尚未結束）
    for (let i = data.length - 1; i >= 1; i--) {
      const row = data[i];
      if (row[1].toString().replace("'", "") === lastFour && !row[4]) {
        targetRow = i + 1;
        break;
      }
    }
    
    if (action === "上班") {
      // 檢查是否有最近一筆紀錄，並檢查上次下班時間是否達到 11 小時
      let lastRecordIndex = -1;
      for (let i = data.length - 1; i >= 1; i--) {
        if (data[i][1].toString().replace("'", "") === lastFour) {
          lastRecordIndex = i;
          break;
        }
      }
      if (lastRecordIndex !== -1) {
        const lastClockOut = data[lastRecordIndex][4]; // 第5欄為下班時間
        if (!lastClockOut) {
          status = "error";
          errorCode = "SHIFT-001";
          return JSON.stringify({
            status: "error",
            error: "ALREADY_CLOCKIN",
            code: errorCode,
            message: "上一筆班別尚未下班，無法重複上班"
          });
        } else {
          // 檢查是否滿 11 小時休息，若不足則阻擋打卡
          const lastClockOutTime = new Date(lastClockOut).getTime();
          const nowTime = now.getTime();
          const hoursDiff = (nowTime - lastClockOutTime) / (1000 * 60 * 60);
          if (hoursDiff < 11) {
            status = "error";
            errorCode = "SHIFT-REST-001";
            return JSON.stringify({
              status: "error",
              error: "INSUFFICIENT_REST",
              code: errorCode,
              message: "下班後未間隔 11 小時"
            });
          }
        }
      }
      
      // 原有判斷：檢查同一日期是否已有上班紀錄
      for (let i = 1; i < data.length; i++) {
        const row = data[i];
        if (row[1].toString().replace("'", "") === lastFour && row[3]) {
          const punchDateStr = Utilities.formatDate(new Date(row[3]), "GMT+8", "yyyy/MM/dd");
          if (punchDateStr === nowDay) {
            status = "error";
            errorCode = "SHIFT-002";
            return JSON.stringify({
              status: "error",
              error: "DUPLICATE_CLOCKIN",
              code: errorCode,
              message: "已有下班紀錄｜更正請填補卡登記表"
            });
          }
        }
      }
    } else if (action === "下班") {
      if (!targetRow) {
        let hasRecord = data.some(row => row[1].toString().replace("'", "") === lastFour);
        if (hasRecord) {
          status = "error";
          errorCode = "SHIFT-003";
          return JSON.stringify({
            status: "error",
            error: "ALREADY_CLOCKOUT",
            code: errorCode,
            message: "已有下班紀錄｜更正請填補卡登記表"
          });
        } else {
          status = "error";
          errorCode = "SHIFT-004";
          return JSON.stringify({
            status: "error",
            error: "NO_CLOCKIN",
            code: errorCode,
            message: "尚未上班｜不能下班"
          });
        }
      }
    }
    
    let parsed;
    try {
      parsed = JSON.parse(deviceInfo);
    } catch (e) {
      parsed = {};
    }
    const deviceEquipment = parsed.OS || "未知";
    const userAgent = parsed.Browser || "未知";
    const browser = parseBrowser(userAgent);
    
    // 若是第一次綁定（bindDevice 為 true）但瀏覽器不在允許清單中，就回傳錯誤
    if (bindDevice && !browser) {
      return JSON.stringify({
        status: "error",
        error: "UNSUPPORTED_BROWSER",
        code: "BROWSER-001",
        message: "請使用 Microsoft Edge、Chrome、Safari 或 Firefox 進行設備綁定"
      });
    }
    
    const authSheet = ss.getSheetByName("AuthList");
    const authData = authSheet.getDataRange().getValues();
    let deviceBoundUUID = null;
    let authRow = null;
    for (let i = 1; i < authData.length; i++) {
      if (authData[i][0].toString() === lastFour) {
        authRow = i + 1;
        deviceBoundUUID = authData[i][2];
        break;
      }
    }
    if (!deviceBoundUUID && bindDevice) {
      authSheet.getRange(authRow, 3).setValue(uuid);
      deviceBoundUUID = uuid;
    } else if (deviceBoundUUID && deviceBoundUUID !== uuid) {
      // 記錄 log：裝置不符
      writeLog({
        status: "打卡警告",
        user: userName + "('" + lastFour + "')",
        action: "裝置綁定不符",
        distance: "",
        msg: `裝置 UUID 不匹配：綁定為 ${deviceBoundUUID}，目前為 ${uuid}`,
        lng: lng,
        lat: lat
      });
      status = "error";
      errorCode = "AUTH-005";
      return JSON.stringify({
        status: "error",
        error: "DEVICE_UUID_MISMATCH",
        code: errorCode,
        message: "打卡異常：裝置未經授權"
      });
    }
    
    if (action === "上班") {
      const shiftId = generateShiftId(lastFour);
      dbSheet.appendRow([
        shiftId,
        "'" + lastFour,
        userName,
        formattedNow,  // 使用格式化後的時間
        "",
        distanceRounded,
        deviceEquipment,
        browser,
        uuid,
        "",
        "",
        "",
        ""
      ]);
    } else if (action === "下班") {
      // 修改：以純文字形式儲存下班時間，避免試算表自動轉換格式
      dbSheet.getRange(targetRow, 5).setValue("'" + formattedNow); // 下班時間
      dbSheet.getRange(targetRow, 10).setValue(distanceRounded);
      dbSheet.getRange(targetRow, 11).setValue(deviceEquipment);
      dbSheet.getRange(targetRow, 12).setValue(browser);
      dbSheet.getRange(targetRow, 13).setValue(uuid);
    }
    
    writeLog({
      status: "打卡成功",
      user: userName + "('" + lastFour + "')",
      action: action,
      distance: distanceRounded,
      msg: ""
    });
    
    // Email 部分
    const datePart = Utilities.formatDate(now, "GMT+8", "yyyy-MM-dd");
    const dayZh = DAY_NAMES[now.getDay()];
    const nowDate = datePart + "-" + dayZh;
    const nowTime = Utilities.formatDate(now, "GMT+8", "HH:mm:ss");
    const emailSubject = (action === "上班") 
      ? "【 OS-上班-出勤通報 】" 
      : "【 OS-下班-出勤通報 】";
    const emailBody = 
      `<div style="
        background: #1a1a1a;
        padding: 24px;
        font-family: 'Roboto Mono', monospace;
        color: #e0e0e0;
        border-radius: 10px;
        max-width: 600px;
        margin: 0 auto;
      ">
        <h2 style="
          color: #ccc;
          font-weight: bold;
          border-bottom: 1px solid #444;
          padding-bottom: 8px;
          margin-bottom: 16px;
        ">
          OS 出勤通報
        </h2>
        <div style="
          background-color: #2f2f2f;
          padding: 16px;
          border: 1px solid #444;
          border-radius: 6px;
        ">
          <p style="margin:0 0 8px;">
            <strong>同仁：</strong>
            <span style="color:#ddd;">${userName}</span>
          </p>
          <p style="margin:0 0 8px;">
            <strong>日期：</strong>
            <span style="color:#ddd;">${nowDate}</span>
          </p>
          <p style="margin:0 0 8px;">
            <strong>時間：</strong>
            <span style="color:#ddd;">${nowTime}</span>
          </p>
          <p style="margin:0 0 8px;">
            <strong>動作：</strong>
            <span style="color:#ddd;">${action}</span>
          </p>
          <p style="margin:0;">
            <strong>距離：</strong>
            <span style="color:#ddd;">${distanceRounded} 公尺</span>
          </p>
        </div>
      </div>`;
    
    sendNotificationEmails(emailSubject, emailBody, notificationRecipients);
    
    return JSON.stringify({
      status: "success",
      error: null,
      code: null,
      message: `${userName}｜已完成打卡${action}`,
      detail: { time: nowDate + " " + nowTime, distance: distanceRounded }
    });
    
  } catch (err) {
    status = "error";
    const errorCode = "SYS-001";
    errorMsg = err.toString();
    writeLog({ status: "錯誤", user: "'" + lastFour, action: action, msg: "系統錯誤：" + err });
    return JSON.stringify({
      status: "error",
      error: "SYSTEM_ERROR",
      code: errorCode,
      message: "系統錯誤，請稍後再試",
      detail: errorMsg
    });
  } finally {
    if (lockAcquired) {
      lock.releaseLock();
    }
    const endTime = new Date();
    writeMonitorLog(monitorSheet, "gpsCheckin", startTime, endTime, status, null, errorMsg);
  }
}

/**
 * 批次處理離線打卡
 */
function bulkOfflineCheckin(recordsJSON) {
  const startTime = new Date();
  const monitorSheet = getMonitorSheet();
  let status = "success", errorCode = null, errorMsg = null;
  const lock = LockService.getScriptLock();
  let lockAcquired = false;
  try {
    lock.waitLock(30000);
    lockAcquired = true;
    const records = JSON.parse(recordsJSON);
    let successIds = [];
    let failIds = [];
    records.forEach(record => {
      const { lastFour, deviceInfo, action, lat, lng, force, bindDevice, uuid } = record;
      const resultStr = gpsCheckin(lastFour, JSON.stringify(deviceInfo), action, lat, lng, force, bindDevice, uuid);
      try {
        const resultObj = JSON.parse(resultStr);
        if (resultObj.status === "success") {
          successIds.push(record.localId);
        } else {
          failIds.push(record.localId);
        }
      } catch(e) {
        failIds.push(record.localId);
      }
    });
    return JSON.stringify({
      status: "success",
      successIds: successIds,
      failIds: failIds,
      message: "離線打卡上傳完成"
    });
  } catch (err) {
    status = "error";
    errorCode = "SYS-BULK-500";
    errorMsg = err.toString();
    return JSON.stringify({
      status: "error",
      error: "BULK_CHECKIN_ERROR",
      code: errorCode,
      message: "批次處理離線打卡時發生錯誤",
      detail: errorMsg
    });
  } finally {
    if (lockAcquired) {
      lock.releaseLock();
    }
    const endTime = new Date();
    writeMonitorLog(monitorSheet, "bulkOfflineCheckin", startTime, endTime, status, errorCode, errorMsg);
  }
}

/**
 * 查詢今日打卡記錄
 */
function queryTodayRecords(lastFour) {
  const startTime = new Date();
  const monitorSheet = getMonitorSheet();
  let status = "success", errorCode = null, errorMsg = null;
  try {
    const ss = getSpreadsheet();
    const authMap = getAuthMap();
    const userName = authMap[lastFour];
    if (!userName) {
      status = "error";
      errorCode = "AUTH-006";
      writeLog({ status: "查詢失敗", user: "'" + lastFour, action: "查詢", msg: "後四碼不在授權名單中" });
      return JSON.stringify({
        status: "error",
        error: "NOT_IN_AUTHLIST",
        code: errorCode,
        message: "查詢失敗｜不在授權名單中"
      });
    }
    const dbSheet = ss.getSheetByName("DB");
    if (!dbSheet) {
      return JSON.stringify({ status: "success", html: "<div style='color:red; text-align:center;'>尚無打卡記錄</div>" });
    }
    const data = dbSheet.getDataRange().getValues();
    if (data.length < 2) {
      return JSON.stringify({ status: "success", html: "<div style='color:red; text-align:center;'>尚無打卡記錄</div>" });
    }
    const result = data.slice(1).filter(row => row[1].toString().replace("'", "") === lastFour);
    if (result.length === 0) {
      return JSON.stringify({ status: "success", html: "<div style='color:red; text-align:center;'>尚無打卡記錄</div>" });
    }
    let html = "<table style='width:100%; border-collapse:collapse; text-align:center; border:1px solid #555; font-size:18px;'>";
    html += "<thead style='background-color:#444444; color:#FFFFFF; font-weight:bold;'><tr>";
    html += "<th style='padding:8px; border:1px solid #666;'>日期</th>";
    html += "<th style='padding:8px; border:1px solid #666;'>星期</th>";
    html += "<th style='padding:8px; border:1px solid #666;'>使用者</th>";
    html += "<th style='padding:8px; border:1px solid #666;'>上班</th>";
    html += "<th style='padding:8px; border:1px solid #666;'>下班</th>";
    html += "</tr></thead><tbody>";
    result.forEach(rec => {
      let dateStr = "--", dayStr = "--", clockInStr = "--";
      if (rec[3]) {
        const startDate = new Date(rec[3]);
        dateStr = Utilities.formatDate(startDate, "GMT+8", "yyyy-MM-dd");
        dayStr = DAY_NAMES[startDate.getDay()];
        clockInStr = Utilities.formatDate(startDate, "GMT+8", "HH:mm:ss");
      }
      let clockOutStr = "--";
      if (rec[4]) {
        const endDate = new Date(rec[4]);
        clockOutStr = Utilities.formatDate(endDate, "GMT+8", "HH:mm:ss");
      }
      html += "<tr style='color:#ffffff;'>";
      html += `<td style='padding:8px; border:1px solid #666;'>${dateStr}</td>`;
      html += `<td style='padding:8px; border:1px solid #666;'>${dayStr}</td>`;
      html += `<td style='padding:8px; border:1px solid #666;'>${rec[2]}</td>`;
      html += `<td style='padding:8px; border:1px solid #666; color:#2ecc71;'>${clockInStr}</td>`;
      html += `<td style='padding:8px; border:1px solid #666; color:#e74c3c;'>${clockOutStr}</td>`;
      html += "</tr>";
    });
    html += "</tbody></table>";
    writeLog({ 
      status: "查詢成功",
      user: userName + "('" + lastFour + "')",
      action: "查詢",
      msg: "共 " + result.length + " 筆"
    });
    return JSON.stringify({ status: "success", html: html });
  } catch (err) {
    status = "error";
    errorCode = "SYS-QRY-500";
    errorMsg = err.toString();
    writeLog({ status: "查詢錯誤", user: "'" + lastFour, action: "查詢", msg: "系統錯誤：" + err });
    return JSON.stringify({
      status: "error",
      error: "SYSTEM_ERROR",
      code: errorCode,
      message: "系統錯誤，請稍後再試",
      detail: errorMsg
    });
  } finally {
    const endTime = new Date();
    writeMonitorLog(monitorSheet, "queryTodayRecords", startTime, endTime, status, errorCode, errorMsg);
  }
}

/**
 * 測試定位（含授權檢查）
 */
function testLocationWithAuth(lastFour, lat, lng) {
  const startTime = new Date();
  const monitorSheet = getMonitorSheet();
  let status = "success", errorCode = null, errorMsg = null;
  try {
    const { radius } = getSettings();
    const ss = getSpreadsheet();
    const authMap = getAuthMap();
    const userName = authMap[lastFour];
    if (!userName) {
      status = "error";
      errorCode = "AUTH-007";
      writeLog({
        status: "測試定位失敗",
        user: "'" + lastFour,
        action: "測試定位",
        msg: "後四碼不在授權名單中"
      });
      return JSON.stringify({
        status: "error",
        error: "NOT_IN_AUTHLIST",
        code: errorCode,
        message: "定位失敗｜不在授權名單中"
      });
    }
    let minDistance = Infinity;
    OFFICE_POINTS.forEach(office => {
      const dist = getDistanceInMeters(lat, lng, office.lat, office.lng);
      if (dist < minDistance) minDistance = dist;
    });
    const distanceRounded = Math.round(minDistance);
    writeLog({
      status: "測試定位",
      user: userName + "('" + lastFour + "')",
      action: "測試定位",
      distance: distanceRounded,
      msg: "",
      lng: lng,
      lat: lat
    });
    let html = "<div style='color:#FFFFFF; line-height:1.6;'>";
    html += `目前的座標：<br>緯度：<span class='digit'>${Number(lat).toFixed(6)}</span><br>經度：<span class='digit'>${Number(lng).toFixed(6)}</span><br><br>`;
    html += `距離公司：<span class='digit'>${distanceRounded}</span> 公尺<br>`;
    if (distanceRounded <= radius) {
      html += `<span style='color:#2ecc71;'>已在可打卡範圍 (≤ <span class='digit'>${radius}</span> 公尺)</span>`;
    } else {
      const exceed = distanceRounded - radius;
      html += `<span style='color:#e74c3c;'>超出可打卡範圍，還差 <span class='digit'>${exceed}</span> 公尺</span>`;
    }
    html += "</div>";
    return JSON.stringify({ status: "success", html: html });
  } catch (err) {
    status = "error";
    errorCode = "SYS-TST-500";
    errorMsg = err.toString();
    return JSON.stringify({
      status: "error",
      error: "SYSTEM_ERROR",
      code: errorCode,
      message: "測試定位時發生錯誤",
      detail: errorMsg
    });
  } finally {
    const endTime = new Date();
    writeMonitorLog(monitorSheet, "testLocationWithAuth", startTime, endTime, status, errorCode, errorMsg);
  }
}
